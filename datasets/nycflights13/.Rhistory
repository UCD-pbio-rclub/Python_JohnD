options(error = old)
browser()
}
options(error = browseOnce())
f <- function() stop("!")
f()
i <- 1
while(i < 3) {
tryCatch({
Sys.sleep(0.5)
message("Try to escape")
}, interrupt = function(x) {
message("Try again!")
i <<- i + 1
})
}
Filter(function(x) !is.numeric(x), mtcars)
mtcars
Filter(function(x) is.numeric(x), mtcars)
(function(x) 3)
(function(x) 3)()
sin(pi)
sin(pi)/2
sin(pi)/2*pi
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)
l
lapply(l, length)
unlist(lapply(l, length))
mtcars[] <- lapply(mtcars, function(x) x / mean(x))
View(mtcars)
xs <- runif(1e3)
res <- c()
system.time({for (x in xs) {
# This is slow!
res <- c(res, sqrt(x))
}})
xs <- runif(1e6)
res <- c()
system.time({for (x in xs) {
# This is slow!
res <- c(res, sqrt(x))
}})
xs <- runif(1e4)
res <- c()
system.time({for (x in xs) {
# This is slow!
res <- c(res, sqrt(x))
}})
xs <- runif(1e5)
res <- c()
system.time({for (x in xs) {
# This is slow!
res <- c(res, sqrt(x))
}})
res <- numeric(length(xs))
system.time({for (i in seq_along(xs)) {
res[i] <- sqrt(xs[i])
}})
?vapply
vapply(mtcars, is.numeric)
vapply(mtcars, is.numeric, logical(2))
vapply(mtcars, is.numeric, logical(1))
rollmean <- function(x, n) {
out <- rep(NA, length(x))
offset <- trunc(n / 2)
for (i in (offset + 1):(length(x) - n + offset + 1)) {
out[i] <- mean(x[(i - offset):(i + offset - 1)])
}
out
}
x <- seq(1, 3, length = 1e2) + runif(1e2)
plot(x)
lines(rollmean(x, 5), col = "blue", lwd = 2)
lines(rollmean(x, 10), col = "red", lwd = 2)
a <- matrix(1:20, nrow = 5)
a
apply(a, 1, mean)
34/4
apply(a, 2, mean)
x <- matrix(rnorm(20, 0, 10), nrow = 4)
x
?rnorm
x1 <- sweep(x, 1, apply(x, 1, min), `-`)
x1
x2 <- sweep(x1, 1, apply(x1, 1, max), `/`)
x2
a <- c("a","b","c")
b <- c(1,2,3)
outer(a,b, paste0)
unlist(outer(a,b, paste0))
as.vector(outer(a,b, paste0))
sort(as.vector(outer(a,b, paste0)))
pulse <- round(rnorm(22, 70, 10 / 3)) + rep(c(0, 5), c(10, 12))
group <- rep(c("A", "B"), c(10, 12))
pulse
group
tapply(pulse, group, length)
tapply(pulse, group, mean)
split(pulse, group)
Reduce(`+`, 1:3)
Reduce(sum, 1:3) # -> sum(sum(1, 2), 3)
l <- replicate(5, sample(1:10, 15, replace = T), simplify = FALSE)
l
str(l)
l <- replicate(5, sample(1:10, 15, replace = T))
l
l <- replicate(5, sample(1:10, 15, replace = T), simplify = FALSE)
str(l)
intersect(l[[1]], l[[2]])
l
intersect(intersect(intersect(intersect(l[[1]], l[[2]]),
l[[3]]), l[[4]]), l[[5]])
Reduce(intersect, l)
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
df
where(is.factor, df)
where <- function(f, x) {
vapply(x, f, logical(1))
}
where(is.factor, df)
integrate(sin, 0, pi)
str(uniroot(sin, pi * c(1 / 2, 3 / 2)))
runif(1)
x <- seq(0, 2 * pi, length = 100)
sinx <- sin(x)
plot(x, sinx, type = "l")
?deparse
library(lattice)
xyplot(mpg ~ disp, data = mtcars)
x <- quote(mpg)
y <- quote(disp)
xyplot(x ~ y, data = mtcars)
x
y
x <- quote(mpg)
y <- quote(disp)
subs(xyplot(x ~ y, data = mtcars))
install.packages("installr")
library(installr)
updater()
updateR()
install.packages("RcppEigen")
getwd()
install.packages("swirl")
library(swirl)
swirl()
min(18,log2(639542972/929111))
min(18,log2(3000000000/100000))
library(swirl)
swirl()
install.packages(c("hms", "htmlTable", "Rcpp", "vcfR", "vegan", "yaml"))
?replicate
replicate(3,"AAA")
?list
x <- 1:100
f <- function(x) sqrt(sum(x))
f(x**2)
sqrt(sum(x))
x <- x**2
sqrt(sum(x))
x <- 1:100
f <- function(x) sqrt(sum(x))
f(x**2)
x <- 1:100
f <- function(x) sqrt(sum(x))
f(x)
x <- 1:100
f <- function(x) sqrt(x)
f(x)
library(shiny)
if (interactive()) {
# Show a message when button is clicked
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
# App with show and remove buttons
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
}
if (interactive()) {
# Show a message when button is clicked
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
}
if (interactive()) {
# Display an important message that can be dismissed only by clicking the
# dismiss button.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
if (interactive()) {
# Display an important message that can be dismissed only by clicking the
# dismiss button.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
}
if (interactive()) {
# Display an important message that can be dismissed only by clicking the
# dismiss button.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
}
(4-1 + 4-1)!/(4-1)!(4-1)
factorial(4-1 + 4-1)/factorial(4-1)*(4-1)
factorial(9)/factorial(3)*factorial(3)
factorial(9)/(factorial(3)*factorial(3))
factorial(6)/(factorial(3)*factorial(3))
120/6
install.packages(c("tidyverse", "ggplot2", "reshape2", "knitr"))
install.packages("reticulate")
library(reticulate)
py$x
# Chunk 1
import random
x = random.int(1,6)
# Chunk 2
py$x
os <- import("os")
install.packages("reticulate")
os <- import("os")
library(reticulate)
os <- import("os")
Sys.which("python")
library(reticulate)
os <- import("os")
# Chunk 1
import random
x = random.int(1,6)
# Chunk 2
py$x
import(random)
import("random")
random <- import("random")
random.int(1,6)
random$int(1,6)
random$randint(1,6)
random$randint(1,100)
install.packages(c("callr", "dplyr", "highr", "httpuv", "later", "modelr", "munsell", "pillar", "psych", "purrr", "Rcpp", "rlang", "rmarkdown", "stringi", "stringr", "tidyr", "utf8"))
# Chunk 1
import random
x = random.int(1,6)
# Chunk 2
random <- import("random")
random$randint(1,100)
py$x
library(reticulate)
# Chunk 1
import random
x = random.int(1,6)
# Chunk 2
random <- import("random")
random$randint(1,100)
py$x
# Chunk 1
import random
x = random.int(1,6)
# Chunk 2
random <- import("random")
random$randint(1,100)
a <- py$x
a
?py
# Chunk 1
import random
x = random.randint(1,6)
# Chunk 2
random <- import("random")
random$randint(1,100)
a <- py$x
a
# Chunk 1
import random
x = random.randint(1,6)
# Chunk 2
x
# Chunk 1
import random
x = random.randint(1,6)
library(reticulate)
# Chunk 1
import random
x = random.randint(1,6)
# Chunk 1
random <- import(random)
x = random.randint(1,6)
random <- import(random)
x = random.randint(1,6)
# Chunk 1
random <- import('random')
x = random.randint(1,6)
# Chunk 1
random <- import('random')
x = random$randint(1,6)
random <- import('random')
x = random$randint(1,6)
x
x = random$randint(1,6)
x
x <- random$randint(1,6)
x
shiny::runApp('Work/Forced_Volunteering')
runApp('Work/Forced_Volunteering')
shiny::runApp('Work/Forced_Volunteering')
runApp('Work/Forced_Volunteering')
a <- "adasd,wfsdfa,sdfadsf"
strsplit(a,',')
list(strsplit(a,','))
b <- strsplit(a,',')
vc <- c('sad','dsfs')
unlist(b)
d <- unlist(b)
e <- c()
f <- e + d
f <- d + d
f <- c(e, d)
f <- c(vc, d)
typeof(f)
a <- c("dad","mom")
b <- c("bro","sis")
b <- c("bro","sis","mom")
unique(c(a,b))
runApp('Work/Forced_Volunteering')
order(f)
sort(f)
a <- c('aaa','bbb','ccc')
b <- c('aaa,'ccc')
b <- c('aaa','ccc')
a - v
a - b
a !%in% b
a %in% b
c <- a[!(b %in% a)]
c <- a[!(a %in% b)]
runApp('Work/Forced_Volunteering')
sample(f, 1)
runApp('Work/Forced_Volunteering')
test<-read_tsv("https://www.arabidopsis.org/download_files/Subscriber_Data_Releases/TAIR_Data_20180630/gene_aliases_20180702.txt.gz")
library(readr)
library(dpylr)
library(dplyr)
test<-read_tsv("https://www.arabidopsis.org/download_files/Subscriber_Data_Releases/TAIR_Data_20180630/gene_aliases_20180702.txt.gz")
View(test)
new <- head(test)
new
test %>% group_by(name)
test %>% gather(name, symbol) %>% spread(name,symbol)
library(tidyr)
test %>% gather(name, symbol) %>% spread(name,symbol)
new %>% gather(name, symbol,full_name) %>% spread(name,symbol)
aggregate(new[,2], list(new[,1]), function(x) paste0(unique(x)))
aggregate(new[,2:3], list(new[,1]), function(x) paste0(unique(x)))
aggregate(test[,2:3], list(test[,1]), function(x) paste0(unique(x)))
X2 <- ddply(test, .(name), summarize,
Xc=paste(symbol,collapse=","),
Zc=paste(full_name,collapse=","))
library(plyr)
X2 <- ddply(test, .(name), summarize,
Xc=paste(symbol,collapse=","),
Zc=paste(full_name,collapse=","))
View(test)
View(X2)
X2 <- ddply(test, .(name), summarize,
symbol=paste(symbol,collapse=","),
full_name=paste(full_name,collapse=","))
View(X2)
test %>% group_by(name) %>% summmarize(symbol, collapse=",")
library(tidyr)
library(tidyverse)
test %>% group_by(name) %>%
summarise(name)
test %>% group_by(name) %>%
summarise(symbol)
test %>% group_by(name) %>%
summarize()
test %>% group_by(name) %>%
summarize(symbol)
test %>% group_by(name) %>%
summarize_each()
test %>% group_by(name) %>%
summarize_each(funs(print))
test %>% group_by(name) %>%
summarize_each(funs(c))
a <-  test %>% group_by(name) %>%
summarize_each(funs(print))
a <-test %>% group_by(name) %>%
summarize_all(funs(print))
test %>% group_by(name) %>%
summarize_all(funs(print))
test %>% group_by(name) %>%
summarize_each(funs(print))
test %>% group_by(name) %>%
summarize_each(funs())
a <-test %>% group_by(name) %>%
summarize_each(funs())
View(a)
a <-test %>% group_by(name) %>%
summarise(symbol = paste(symbol))
a <-test %>% group_by(name) %>%
summarise(symbol = paste(symbol, collapse=","))
View(a)
a <-test %>% group_by(name) %>%
summarise(symbol = paste(symbol, collapse=","), full_name = paste(full_name, collapse=","))
import sys
sys.version
install.packages(c("broom", "callr", "caTools", "cli", "cowplot", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "ggplot2", "glue", "gtools", "haven", "htmlwidgets", "httpuv", "later", "mime", "openssl", "pillar", "pkgconfig", "processx", "R6", "Rcpp", "reprex", "reticulate", "rlang", "rstudioapi", "scales", "stringi", "survival", "tinytex", "xtable", "yaml"))
shiny::runApp('Work/Forced_Volunteering')
runApp('Work/Forced_Volunteering')
?shinyApp
runApp('Work/Forced_Volunteering')
install.packages(c("backports", "BH", "broom", "callr", "clipr", "colorspace", "cowplot", "curl", "dbplyr", "digest", "dplyr", "DT", "e1071", "evaluate", "ggplot2", "gplots", "haven", "httpuv", "httr", "jsonlite", "knitr", "markdown", "MASS", "openssl", "pillar", "processx", "ps", "psych", "purrr", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "rstudioapi", "shiny", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "xfun"))
install.packages(c("class", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "survival"), lib="C:/Program Files/R/R-3.5.0/library")
library(nycflights13)
install.packages(c("tidyverse", "nycflights13"))
setwd("~/Python/python-data-analysis_JohnD/datasets")
setwd("~/Python/python-data-analysis_JohnD/datasets/nycflights13")
library(nycflights13)
library(tidyverse)
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(flights,'flights.xlsx')
a <- flights
View(a)
write.xlsx(a,'flights.xlsx', sheetName = 'Flights')
write.xlsx(a,'flights.xlsx', sheetName = 'Flights', row.names = F)
b <- head(a)
View(b)
write.xlsx(b,'flights.xlsx', sheetName = 'Flights', row.names = F)
b
b <- data.frame(head(a))
b
write.xlsx(b,'flights.xlsx', sheetName = 'Flights', row.names = F)
write.xlsx(data.frame(a),'flights.xlsx', sheetName = 'Flights', row.names = F)
write.csv(a,'flights.csv',row.names = F)
b <- airlines
View(b)
write.csv(b,'airlines.csv',row.names = F)
c <- weather
write_delim(c,'weather.tsv',delim = '\t')
write.csv(b,'airlines.csv',row.names = F, quote = F)
